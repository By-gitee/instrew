[PROMOTE]-start
GEPs size:5
GEPpromoteMem2Reg:start
  %23 = getelementptr i8, ptr %22, i64 -4start
  %23 = getelementptr i8, ptr %22, i64 -4end
[1]  %23 = getelementptr i8, ptr %22, i64 -4
  %24 = getelementptr i8, ptr %22, i64 -20start
  %24 = getelementptr i8, ptr %22, i64 -20end
[1]  %24 = getelementptr i8, ptr %22, i64 -20
  %26 = getelementptr i8, ptr %22, i64 -28start
  %26 = getelementptr i8, ptr %22, i64 -28end
[1]  %26 = getelementptr i8, ptr %22, i64 -28
  %25 = getelementptr i8, ptr %22, i64 -24start
  %25 = getelementptr i8, ptr %22, i64 -24end
[1]  %25 = getelementptr i8, ptr %22, i64 -24
[3]  %27 = getelementptr i8, ptr %22, i64 -8
  %100 = load i32, ptr %27, align 1
  %77 = load i32, ptr %27, align 1
  store i32 %74, ptr %27, align 1
  %73 = load i32, ptr %27, align 1
  store i32 0, ptr %27, align 1
GEPpromoteMem2Reg:temp
over
4
2GEPs size:5
GEPs size:0
0
2GEPs size:0
GEPs size:1
GEPpromoteMem2Reg:start
[3]  %60 = getelementptr i8, ptr %22, i64 -12
  %98 = load i32, ptr %60, align 1
  store i32 %96, ptr %60, align 1
  %95 = load i32, ptr %60, align 1
  store i32 0, ptr %60, align 1
GEPpromoteMem2Reg:temp
over
0
2GEPs size:1
GEPs size:1
GEPpromoteMem2Reg:start
[3]  %83 = getelementptr i8, ptr %22, i64 -16
  %111 = load i32, ptr %83, align 1
  store i32 %112, ptr %83, align 1
  store i32 0, ptr %83, align 1
GEPpromoteMem2Reg:temp
over
0
2GEPs size:1
[Restore store]1  store i32 %73, ptr %27, align 4
[Restore store]3  store i32 %95, ptr %60, align 4
[Restore store]5  store i32 %111, ptr %83, align 4
[PROMOTE]-end
here:
; Function Attrs: null_pointer_is_valid
define hhvmcc { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } @S0_hhvm(i64 %0, ptr addrspace(1) noalias nocapture align 16 dereferenceable(400) %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i64 %7, i64 %8, i64 %9, i64 %10, i64 %11, i64 %12, i64 %13) #0 {
  %15 = getelementptr i8, ptr addrspace(1) %1, i64 136
  %16 = getelementptr i8, ptr addrspace(1) %1, i64 137
  %17 = getelementptr i8, ptr addrspace(1) %1, i64 138
  %18 = getelementptr i8, ptr addrspace(1) %1, i64 139
  %19 = getelementptr i8, ptr addrspace(1) %1, i64 140
  %20 = getelementptr i8, ptr addrspace(1) %1, i64 141
  %21 = inttoptr i64 %3 to ptr
  %22 = getelementptr i64, ptr %21, i64 -1
  store i64 %13, ptr %22, align 4
  %23 = getelementptr i8, ptr %22, i64 -4
  store i32 0, ptr %23, align 1
  %24 = getelementptr i8, ptr %22, i64 -20
  store i32 10, ptr %24, align 1
  %25 = getelementptr i8, ptr %22, i64 -24
  store i32 20, ptr %25, align 1
  %26 = getelementptr i8, ptr %22, i64 -28
  store i32 30, ptr %26, align 1
  %27 = getelementptr i8, ptr %22, i64 -8
  br label %28

28:                                               ; preds = %14, %72
  %.0 = phi i32 [ 0, %14 ], [ %73, %72 ]
  %29 = phi i32 [ %62, %72 ], [ 20, %14 ]
  %30 = phi i32 [ 10, %72 ], [ 10, %14 ]
  %31 = phi i32 [ %73, %72 ], [ 0, %14 ]
  %32 = phi i64 [ %64, %72 ], [ %6, %14 ]
  %33 = phi i64 [ %65, %72 ], [ %7, %14 ]
  %34 = sub i32 %31, %30
  %35 = icmp slt i32 %34, 0
  %36 = icmp slt i32 %31, %30
  %37 = icmp ne i1 %35, %36
  %38 = icmp ne i1 %35, %37
  %39 = xor i1 %38, true
  br i1 %39, label %40, label %59

40:                                               ; preds = %28
  store i32 %111, ptr %83, align 4
  store i32 %95, ptr %60, align 4
  store i32 %73, ptr %27, align 4
  %41 = getelementptr i64, ptr %22, i64 1
  %42 = load i64, ptr %22, align 4
  %43 = getelementptr i64, ptr %41, i64 1
  %44 = ptrtoint ptr %43 to i64
  %45 = load i64, ptr %41, align 4
  store i1 undef, ptr addrspace(1) %15, align 1
  store i1 undef, ptr addrspace(1) %16, align 1
  store i8 undef, ptr addrspace(1) %17, align 1
  store i1 undef, ptr addrspace(1) %18, align 1
  store i1 undef, ptr addrspace(1) %19, align 1
  store i1 undef, ptr addrspace(1) %20, align 1
  %46 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } undef, i64 %45, 0
  %47 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %46, i64 0, 8
  %48 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %47, i64 %33, 5
  %49 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %48, i64 %32, 4
  %50 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %49, i64 %2, 1
  %51 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %50, i64 %44, 13
  %52 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %51, i64 %42, 11
  %53 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %52, i64 %5, 3
  %54 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %53, i64 %4, 2
  %55 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %54, i64 %8, 6
  %56 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %55, i64 %9, 7
  %57 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %56, i64 %11, 9
  %58 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %57, i64 %12, 10
  ret { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %58

59:                                               ; preds = %28
  %60 = getelementptr i8, ptr %22, i64 -12
  br label %61

61:                                               ; preds = %59, %94
  %.03 = phi i32 [ 0, %59 ], [ %95, %94 ]
  %62 = phi i32 [ 20, %94 ], [ %29, %59 ]
  %63 = phi i32 [ %95, %94 ], [ 0, %59 ]
  %64 = phi i64 [ %86, %94 ], [ %32, %59 ]
  %65 = phi i64 [ %87, %94 ], [ %33, %59 ]
  %66 = sub i32 %63, %62
  %67 = icmp slt i32 %66, 0
  %68 = icmp slt i32 %63, %62
  %69 = icmp ne i1 %67, %68
  %70 = icmp ne i1 %67, %69
  %71 = xor i1 %70, true
  br i1 %71, label %72, label %74

72:                                               ; preds = %61
  %73 = add i32 %.0, 1
  br label %28

74:                                               ; preds = %61
  %75 = zext i32 %63 to i64
  %76 = sext i32 %.0 to i64
  %77 = mul i64 %76, 24000000
  %78 = add i64 139679811100736, %77
  %79 = mul i64 %76, 12000
  %80 = add i64 %78, %79
  %81 = inttoptr i64 %80 to ptr
  %82 = getelementptr i32, ptr %81, i64 %76
  store i32 %63, ptr %82, align 1
  %83 = getelementptr i8, ptr %22, i64 -16
  br label %84

84:                                               ; preds = %74, %96
  %.04 = phi i32 [ 0, %74 ], [ %111, %96 ]
  %85 = phi i32 [ %111, %96 ], [ 0, %74 ]
  %86 = phi i64 [ %110, %96 ], [ %75, %74 ]
  %87 = phi i64 [ %105, %96 ], [ %76, %74 ]
  %88 = sub i32 %85, 30
  %89 = icmp slt i32 %88, 0
  %90 = icmp slt i32 %85, 30
  %91 = icmp ne i1 %89, %90
  %92 = icmp ne i1 %89, %91
  %93 = xor i1 %92, true
  br i1 %93, label %94, label %96

94:                                               ; preds = %84
  %95 = add i32 %.03, 1
  br label %61

96:                                               ; preds = %84
  %97 = mul i32 %.0, %.03
  %98 = mul i32 %97, %85
  %99 = sext i32 %.0 to i64
  %100 = mul i64 %99, 24000000
  %101 = add i64 139679811100736, %100
  %102 = sext i32 %.03 to i64
  %103 = mul i64 %102, 12000
  %104 = add i64 %101, %103
  %105 = sext i32 %85 to i64
  %106 = inttoptr i64 %104 to ptr
  %107 = getelementptr i32, ptr %106, i64 %105
  %108 = load i32, ptr %107, align 1
  %109 = add i32 %98, %108
  %110 = zext i32 %109 to i64
  store i32 %109, ptr %107, align 1
  %111 = add i32 %.04, 1
  br label %84
}
